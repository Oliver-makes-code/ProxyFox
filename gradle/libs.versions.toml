[versions]
guava = "31.1-jre"
logback = "1.2.11"
kord = "0.8.0-M16"
kotlin = "1.7.10"
kotlinx_coroutines = "1.6.4"
proxyfox_command = "1.2"

# Database-specific
postgres = "42.3.3"
kjdbc = "0.5.2"
gson = "2.9.0"
kmongo = "4.6.0"

# Testing
testng = "7.6.1"
mockk = "1.+"

# Plugins
shadow = "7.1.2"
licenser = "1.1.2"

[libraries]
guava = { module = "com.google.guava:guava", version.ref = "guava" }
kord = { module = "dev.kord:kord-core", version.ref = "kord" }
logback = { module = "ch.qos.logback:logback-classic", version.ref = "logback" }
proxyfox_command = { module = "dev.proxyfox:proxyfox-command", version.ref = "proxyfox_command" }

kotlin_stdlib = { module = "org.jetbrains.kotlin:kotlin-stdlib", version.ref = "kotlin" }
kotlinx_coroutines_core = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-core", version.ref = "kotlinx_coroutines" }

gson = { module = "com.google.code.gson:gson", version.ref = "gson" }
kjdbc = { module = "com.vladsch.kotlin-jdbc:kotlin-jdbc", version.ref = "kjdbc" }
postgres = { module = "org.postgresql:postgresql", version.ref = "postgres" }
kmongo_base = { module = "org.litote.kmongo:kmongo", version.ref = "kmongo" }
kmongo_coroutine = { module = "org.litote.kmongo:kmongo-coroutine", version.ref = "kmongo" }
kmongo_async = { module = "org.litote.kmongo:kmongo-async", version.ref = "kmongo" }

testng = { module = "org.testng:testng", version.ref = "testng" }
mockk = { module = "io.mockk:mockk", version.ref = "mockk" }
kotlinx_coroutines_test = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-test", version.ref = "kotlinx_coroutines" }

[bundles]
base = ["guava", "logback", "kotlin_stdlib", "kotlinx_coroutines_core", "kord", "proxyfox_command"]
test = ["testng", "kotlinx_coroutines_test", "mockk"]
database = ["gson", "kmongo_base", "kmongo_coroutine", "kmongo_async"]

[plugins]
kotlin_jvm = { id = "org.jetbrains.kotlin.jvm", version.ref = "kotlin" }
shadow = { id = "com.github.johnrengelman.shadow", version.ref = "shadow" }
licenser = { id = "org.quiltmc.gradle.licenser", version.ref = "licenser" }